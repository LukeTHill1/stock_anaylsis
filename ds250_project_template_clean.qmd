---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._

```{python}
#| label: project-data
#| code-summary: Read and format project data

# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_csv("https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv")
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__COPY PASTE QUESTION|TASK 1 FROM THE PROJECT HERE__

_type your results and analysis here_

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here
import pandas as pd 
import numpy as np
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)

from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import GradientBoostingClassifier
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.linear_model import LinearRegression

# Initializing the model 
model = LinearRegression()

# Running tests to learn the model. Will explain when I actually understand. Working with rows are weird
test_data = pd.read_csv("market_trend_dataset.csv")
# Not doing what I would like. With a closer look at the data its saying the next day, not past day.
test_data['Previous_Close'] = test_data['Close'].shift(1)

test_data = test_data.dropna()

test_data = test_data[test_data['Date'] >= '2019-01-01']
# test_data = test_data.drop(columns=['Date'], axis=1)

last_day = test_data[['Previous_Close']]
target = test_data['Close']

# print(test_data)

X_train, X_test, y_train, y_test = train_test_split(last_day, target, test_size=0.2, random_state=42)

model.fit(X_train,y_train)

y_pred = model.predict(X_test)
# print(y_pred)

last_close = test_data['Close'].iloc[-1]
# tomorrow_prediction = model.predict([[last_close]])
# print(f"Tomorrow's Predicted Closing Price: {tomorrow_prediction[0]}")

future_predictions = []

# Predict the next 30 days
for _ in range(30):
    # Use the last predicted value (or initial last_close for the first prediction)
    next_close = model.predict(np.array([[last_close]]))[0]
    future_predictions.append(next_close)
    
    # Update the last_close with the predicted value for the next iteration
    last_close = next_close

# Create a DataFrame for future predictions
future_df = pd.DataFrame({
    'Day': range(1, 31),
    'Predicted_Close': future_predictions
})

print(future_df)

```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q1-chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
(
ggplot(future_df, aes(x='Day', y='Predicted_Close'))
+ geom_line()
)
```


```{python}
#| label: Q1-table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
mydat = (df.head(1000)
    .groupby('year')
    .sum()
    .reset_index()
    .tail(10)
    .filter(["year", "AK","AR"])
)
display(mydat)

```


## QUESTION|TASK 2

__COPY PASTE QUESTION|TASK 2 FROM THE PROJECT HERE__

_type your results and analysis here_

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q2-chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center

# Include and execute your code here
# (
#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')
# )

```


```{python}
#| label: Q2-table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
# mydat = df.head(1000)\
#     .groupby('year')\
#     .sum()\
#     .reset_index()\
#     .tail(10)\
#     .filter(["year", "AK","AR"])

# display(mydat)

```


## QUESTION|TASK 3

__COPY PASTE QUESTION|TASK 3 FROM THE PROJECT HERE__

_type your results and analysis here_

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here


```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q3-chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
# Include and execute your code here
# (
#   ggplot(df.head(200), aes(x='name', y='AK')) + geom_bar(stat='identity')
# )
```


```{python}
#| label: Q3-table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
# mydat = df.head(1000)\
#     .groupby('year')\
#     .sum()\
#     .reset_index()\
#     .tail(10)\
#     .filter(["year", "AK","AR"])

# display(mydat)

```
